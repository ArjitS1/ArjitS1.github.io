<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Web-Development on Arjit Sharma</title>
    <link>https://www.arjitsharma.com/tags/web-development/</link>
    <description>Recent content in Web-Development on Arjit Sharma</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>arjitsharma32@gmail.com (Arjit Sharma)</managingEditor>
    <webMaster>arjitsharma32@gmail.com (Arjit Sharma)</webMaster>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Tue, 01 Sep 2020 22:05:10 +0530</lastBuildDate>
    
        <atom:link href="https://www.arjitsharma.com/tags/web-development/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>Autoloading in PHP</title>
        <link>https://www.arjitsharma.com/posts/php-autoloading/</link>
        <pubDate>Tue, 01 Sep 2020 22:05:10 +0530</pubDate>
        <author>arjitsharma32@gmail.com (Arjit Sharma)</author>
        <atom:modified>Tue, 01 Sep 2020 22:05:10 +0530</atom:modified>
        <guid>https://www.arjitsharma.com/posts/php-autoloading/</guid>
        <description>Autoloader is a strategy for finding PHP class or interface and loading it at run time when a class is instantiated. Better than writing multiple require and include as they do not scale well and is a clutter.
Make 2 files â‡’
 Greet.php(This is the class file we want to load) mainFile.php(It will consume/use Greet.php)
 Note: Keep file name and class name same.   Greet.phpmainFile.php1 2 3 4 5 6 7  &amp;lt;?</description>
        
        <dc:creator>Arjit Sharma</dc:creator>
        <media:content url="https://www.arjitsharma.com/images/whoami/avatar.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Web-Development</category>
            
          
            
              <category>PHP</category>
            
          
        
        
          
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Dependency Injection in PHP</title>
        <link>https://www.arjitsharma.com/posts/php-dependencyinjection/</link>
        <pubDate>Tue, 01 Sep 2020 22:05:10 +0530</pubDate>
        <author>arjitsharma32@gmail.com (Arjit Sharma)</author>
        <atom:modified>Tue, 01 Sep 2020 22:05:10 +0530</atom:modified>
        <guid>https://www.arjitsharma.com/posts/php-dependencyinjection/</guid>
        <description>When our class need object of other class.
Suppose we have classes : logger(displays a message) UserProfile(Needs to use logger&amp;rsquo;s log function)
 Line-11 : We make variable $logger in UserProfile point to object of logger class. Line-15,19,27 : We use $logger to access log function.  3 steps : Initializing Dependency(Line 23),Injecting Dependency(Line 24) and Using Dependency(Line 27).
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  class logger{ public function log($msg){ echo &amp;#34;Log : $msg&amp;#34;; } } class UserProfile{ public $logger;//This variable will store object of logger public function __construct($logger){ $this-&amp;gt;logger=$logger;//logger variable points to object of logger } public function createUser(){ $this-&amp;gt;logger-&amp;gt;log(&amp;#34;User Created&amp;#34;);//using variable to acces method of logger } public function deleteUser(){ $this-&amp;gt;logger-&amp;gt;log(&amp;#34;User Deleted&amp;#34;); } } $logger=new logger();//Initialize dependecy $profile=new UserProfile($logger);//Inject Dependecy via constructor $profile-&amp;gt;createUser(); $profile-&amp;gt;deleteUser(); $profile-&amp;gt;logger-&amp;gt;log(&amp;#34;Hello&amp;#34;);//using dependecy   </description>
        
        <dc:creator>Arjit Sharma</dc:creator>
        <media:content url="https://www.arjitsharma.com/images/whoami/avatar.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Web-Development</category>
            
          
            
              <category>PHP</category>
            
          
        
        
          
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>DOMDocument Class in PHP</title>
        <link>https://www.arjitsharma.com/posts/php-domdocument/</link>
        <pubDate>Tue, 01 Sep 2020 22:05:10 +0530</pubDate>
        <author>arjitsharma32@gmail.com (Arjit Sharma)</author>
        <atom:modified>Tue, 01 Sep 2020 22:05:10 +0530</atom:modified>
        <guid>https://www.arjitsharma.com/posts/php-domdocument/</guid>
        <description>Represents an entire HTML or XML document. It serves as the root of the document tree. Helps in parsing and creating xml,html
Loading HTML file_get_contents(URL) : Converts html content in URL to String.
loadHTML(file_get_contents(URL)) : Loading HTML string with DomDocument object.
1 2 3 4  doc=new DomDocument(); //convert html of a URL to string using file_get_contents //loading HTML string $doc-&amp;gt;loadHTML(file_get_contents(URL));   Functions to get HTML contents 1 2 3 4 5 6 7  $doc-&amp;gt;getElementsById(&amp;#34;idName&amp;#34;); //Gets all anchor tags inside Document $doc-&amp;gt;getElementsByTagName(&amp;#34;a&amp;#34;); //Gets all src attributes in img in whole doc $doc-&amp;gt;getElementsByTagName(&amp;#34;img&amp;#34;)-&amp;gt;getAttribute(&amp;#39;src&amp;#39;);   Creating and Adding elements in HTML Doc 1 2 3 4  $div = doc-&amp;gt;createElement(&amp;#39;div&amp;#39;);//create a div $div_clone = $div-&amp;gt;cloneNode();//Cloning div to div_clone $doc-&amp;gt;appendChild($div);//Appending div to Document $doc-&amp;gt;saveHTML();//Saves document   Traversing all entries of a element item() : Gets node at certain index within DOMNodeList object.</description>
        
        <dc:creator>Arjit Sharma</dc:creator>
        <media:content url="https://www.arjitsharma.com/images/whoami/avatar.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Web-Development</category>
            
          
            
              <category>PHP</category>
            
          
        
        
          
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>File Handling and Streams in PHP</title>
        <link>https://www.arjitsharma.com/posts/php-filehandling/</link>
        <pubDate>Tue, 01 Sep 2020 22:05:10 +0530</pubDate>
        <author>arjitsharma32@gmail.com (Arjit Sharma)</author>
        <atom:modified>Tue, 01 Sep 2020 22:05:10 +0530</atom:modified>
        <guid>https://www.arjitsharma.com/posts/php-filehandling/</guid>
        <description>Note :
 ftell($file) : Tells where file pointer is When a file is too big ,u cant read entire file in memory in single go then u need to read it in chunks.  Streams A stream is a resource object which exhibits streamable behavior. That is, it can be read from or written to in a linear fashion.
We use Streams to provide data on demand.( Providing data in chunks )</description>
        
        <dc:creator>Arjit Sharma</dc:creator>
        <media:content url="https://www.arjitsharma.com/images/whoami/avatar.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Web-Development</category>
            
          
            
              <category>PHP</category>
            
          
        
        
          
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Javascript Basics</title>
        <link>https://www.arjitsharma.com/posts/javascript-basics/</link>
        <pubDate>Tue, 01 Sep 2020 22:05:10 +0530</pubDate>
        <author>arjitsharma32@gmail.com (Arjit Sharma)</author>
        <atom:modified>Tue, 01 Sep 2020 22:05:10 +0530</atom:modified>
        <guid>https://www.arjitsharma.com/posts/javascript-basics/</guid>
        <description>Logging to Console 1 2 3 4 5 6 7 8 9 10 11  console.log(&amp;#34;Hello World&amp;#34;); console.error(&amp;#34;Yellow&amp;#34;); console.warn(&amp;#34;Warning Mssg&amp;#34;); //Gives time taken between execution console.time(&amp;#34;note time&amp;#34;); console.log(&amp;#34;heck yea&amp;#34;); console.log(&amp;#34;heck yea&amp;#34;); console.log(&amp;#34;heck yea&amp;#34;); console.log(&amp;#34;heck yea&amp;#34;); console.log(&amp;#34;heck yea&amp;#34;); console.timeEnd(&amp;#34;note time&amp;#34;);    Variables and Constants var and let(newer way) keyword are used to initialize varibales.
const keyword is used to assign constant. Constants cant be changed.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  //Initializing variables var name = &amp;#34;arjit&amp;#34;; let age = 18; //Constants const a = 10; a = 20; //Cannot do ,Error  //Cannot change object, but can change property of objects const person = { name: &amp;#34;John&amp;#34;, age: 20 } person.</description>
        
        <dc:creator>Arjit Sharma</dc:creator>
        <media:content url="https://www.arjitsharma.com/images/whoami/avatar.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Web-Development</category>
            
          
            
              <category>Javascript</category>
            
          
        
        
          
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Javascript DOM Manipulation</title>
        <link>https://www.arjitsharma.com/posts/javascript-dom/</link>
        <pubDate>Tue, 01 Sep 2020 22:05:10 +0530</pubDate>
        <author>arjitsharma32@gmail.com (Arjit Sharma)</author>
        <atom:modified>Tue, 01 Sep 2020 22:05:10 +0530</atom:modified>
        <guid>https://www.arjitsharma.com/posts/javascript-dom/</guid>
        <description>Introduction 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  val = document; val = document.all; val = document.all[2]; val = document.all.length;//counts all elements in dom val = document.head; val = document.body; val = document.doctype; val = document.domain; val = document.URL; val = document.characterSet; val = document.contentType; val = document.forms;//Return all forms in a document val = document.</description>
        
        <dc:creator>Arjit Sharma</dc:creator>
        <media:content url="https://www.arjitsharma.com/images/whoami/avatar.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Web-Development</category>
            
          
            
              <category>Javascript</category>
            
          
        
        
          
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Javascript-ES6</title>
        <link>https://www.arjitsharma.com/posts/javascript-es5/</link>
        <pubDate>Tue, 01 Sep 2020 22:05:10 +0530</pubDate>
        <author>arjitsharma32@gmail.com (Arjit Sharma)</author>
        <atom:modified>Tue, 01 Sep 2020 22:05:10 +0530</atom:modified>
        <guid>https://www.arjitsharma.com/posts/javascript-es5/</guid>
        <description>Making a Class in ES6 {{ }}
class Person{
constructor(firstName, lastName){
this.firstName = firstName;
this.lastName = lastName;
}
greeting(){
return Hello there ${this.firstName} ${this.lastName};
}
//Using Static methods
static walk(){
return &amp;lsquo;Person is Walking&amp;rsquo;;
} }
const arjit = new Person(&amp;lsquo;Arjit&amp;rsquo;,&amp;lsquo;Sharma&amp;rsquo;);
console.log(Person.walk());
{{  }}
Inheritance in ES6 {{ }}
class Person{
constructor(firstName, lastName){
this.firstName = firstName;
this.lastName = lastName;
}
greeting(){return `Hello there ${this.firstName} ${this.lastName}`;} }</description>
        
        <dc:creator>Arjit Sharma</dc:creator>
        <media:content url="https://www.arjitsharma.com/images/whoami/avatar.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Web-Development</category>
            
          
            
              <category>Javascript</category>
            
          
        
        
          
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Javascript-ES6</title>
        <link>https://www.arjitsharma.com/posts/javascript-es6/</link>
        <pubDate>Tue, 01 Sep 2020 22:05:10 +0530</pubDate>
        <author>arjitsharma32@gmail.com (Arjit Sharma)</author>
        <atom:modified>Tue, 01 Sep 2020 22:05:10 +0530</atom:modified>
        <guid>https://www.arjitsharma.com/posts/javascript-es6/</guid>
        <description>Making a Class in ES6 {{ }}
class Person{
constructor(firstName, lastName){
this.firstName = firstName;
this.lastName = lastName;
}
greeting(){
return Hello there ${this.firstName} ${this.lastName};
}
//Using Static methods
static walk(){
return &amp;lsquo;Person is Walking&amp;rsquo;;
} }
const arjit = new Person(&amp;lsquo;Arjit&amp;rsquo;,&amp;lsquo;Sharma&amp;rsquo;);
console.log(Person.walk());
{{  }}
Inheritance in ES6 {{ }}
class Person{
constructor(firstName, lastName){
this.firstName = firstName;
this.lastName = lastName;
}
greeting(){return `Hello there ${this.firstName} ${this.lastName}`;} }</description>
        
        <dc:creator>Arjit Sharma</dc:creator>
        <media:content url="https://www.arjitsharma.com/images/whoami/avatar.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Web-Development</category>
            
          
            
              <category>Javascript</category>
            
          
        
        
          
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Object Oriented JS(in ES5)</title>
        <link>https://www.arjitsharma.com/posts/javascript-oopses5/</link>
        <pubDate>Tue, 01 Sep 2020 22:05:10 +0530</pubDate>
        <author>arjitsharma32@gmail.com (Arjit Sharma)</author>
        <atom:modified>Tue, 01 Sep 2020 22:05:10 +0530</atom:modified>
        <guid>https://www.arjitsharma.com/posts/javascript-oopses5/</guid>
        <description>Making a Classfunction Person(name, age){ this.</description>
        
        <dc:creator>Arjit Sharma</dc:creator>
        <media:content url="https://www.arjitsharma.com/images/whoami/avatar.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Web-Development</category>
            
          
            
              <category>Javascript</category>
            
          
        
        
          
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Object Oriented PHP</title>
        <link>https://www.arjitsharma.com/posts/php-oops/</link>
        <pubDate>Tue, 01 Sep 2020 22:05:10 +0530</pubDate>
        <author>arjitsharma32@gmail.com (Arjit Sharma)</author>
        <atom:modified>Tue, 01 Sep 2020 22:05:10 +0530</atom:modified>
        <guid>https://www.arjitsharma.com/posts/php-oops/</guid>
        <description>Class Creation Below is given basic class implementation in PHP
__CLASS__ constant returns name of class
Line 8: Constructor Defined with default values set to null
Line 16: Destructor is called at end of the script
Line 30: Object&amp;rsquo;s properties can be accessed using -&amp;gt; keyword
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  class Student { //className = __CLASS__; public $name; public $roll; public $class; //Constructor function __construct($name=null,$roll=null,$class=null){ //default set to null so that no error occurs even if user doesn&amp;#39;t set all values $this-&amp;gt;name =$name; $this-&amp;gt;roll =$roll; $this-&amp;gt;class =$class; } //Destructor function __destruct(){ echo &amp;#34;Called upon script ending&amp;#34;;} //Method public function sayHello(){ return &amp;#34;Hello World!</description>
        
        <dc:creator>Arjit Sharma</dc:creator>
        <media:content url="https://www.arjitsharma.com/images/whoami/avatar.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Web-Development</category>
            
          
            
              <category>PHP</category>
            
          
        
        
          
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>PDO in PHP</title>
        <link>https://www.arjitsharma.com/posts/php-pdo/</link>
        <pubDate>Tue, 01 Sep 2020 22:05:10 +0530</pubDate>
        <author>arjitsharma32@gmail.com (Arjit Sharma)</author>
        <atom:modified>Tue, 01 Sep 2020 22:05:10 +0530</atom:modified>
        <guid>https://www.arjitsharma.com/posts/php-pdo/</guid>
        <description>PDO stands for PHP Data Objects (Object Oriented). It is a PHP Extension to access database.Unlike mysqli it works with multiple databases. There are 3 main Classes are :
â‡’ PDO - Connection between PHP and DB
â‡’ PDOStatement - Prepared Statement
â‡’ PDOException - Represent error raised by PDO
PDO Basics We create PDO Object,execute a query and fetch result,either in associated array format(FETCH_ASSOC) or object format(FETCH_OBJ )
Line 11 : - Creating PDO Object ( $pdo )</description>
        
        <dc:creator>Arjit Sharma</dc:creator>
        <media:content url="https://www.arjitsharma.com/images/whoami/avatar.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Web-Development</category>
            
          
            
              <category>PHP</category>
            
          
        
        
          
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Asynchronous Javascript</title>
        <link>https://www.arjitsharma.com/posts/javascript-asynchronous/</link>
        <pubDate>Tue, 01 Sep 2020 17:50:12 +0530</pubDate>
        <author>arjitsharma32@gmail.com (Arjit Sharma)</author>
        <atom:modified>Tue, 01 Sep 2020 17:50:12 +0530</atom:modified>
        <guid>https://www.arjitsharma.com/posts/javascript-asynchronous/</guid>
        <description>Synchronous code works in an order. 1st thing then 2nd while in asynchronous , while doing 1st thing do 2nd. Most Async code comes from an API or library
Ways to work with async code
 Callback Promises Async/Await  AJAX : asynchronous JS and XML
Set of web technologies used to send and recieve data from server asynchronously without reloading webpage
Client &amp;ndash; (JS call) -&amp;gt; AJAX Engine &amp;ndash;(XmlHttpRequest)-&amp;gt; SERVER &amp;ndash;(XML/JSON)-&amp;gt; AJAX Engine &amp;ndash;(HTML Response)-&amp;gt; Client</description>
        
        <dc:creator>Arjit Sharma</dc:creator>
        <media:content url="https://www.arjitsharma.com/images/whoami/avatar.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Web-Development</category>
            
          
            
              <category>Javascript</category>
            
          
        
        
          
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>What are Static Site Generators</title>
        <link>https://www.arjitsharma.com/posts/staticsitegenerators/</link>
        <pubDate>Tue, 01 Sep 2020 17:50:12 +0530</pubDate>
        <author>arjitsharma32@gmail.com (Arjit Sharma)</author>
        <atom:modified>Tue, 01 Sep 2020 17:50:12 +0530</atom:modified>
        <guid>https://www.arjitsharma.com/posts/staticsitegenerators/</guid>
        <description>Introduction Websites can be of 2 types :
 Static - When user requests a file, server sends the file and user can see it. Every page is hand coded in html. Dynamic - When user requests, content is generated and server builds the page then sends it to the user. Generally managed by CMS like wordpress,joomla etc  Static site generator (SSG) bridges the gap between static HTML sites and CMS based sites(like wordpress).</description>
        
        <dc:creator>Arjit Sharma</dc:creator>
        
        
        
        
          
            
              <category>Web-Development</category>
            
          
        
        
          
            
          
        
        
          
            
          
        
      </item>
      

    
  </channel>
</rss>